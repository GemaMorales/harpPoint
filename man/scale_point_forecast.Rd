% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_units_and_scaling.R
\name{scale_point_forecast}
\alias{scale_point_forecast}
\title{Scale forecast data}
\usage{
scale_point_forecast(
  .fcst,
  scale_factor,
  new_units = NULL,
  multiplicative = FALSE
)
}
\arguments{
\item{.fcst}{A \code{harp_fcst} object as read in by read_point_forecast from
harpIO.}

\item{scale_factor}{The scaling factor.}

\item{new_units}{The name of the new units - if set to NULL, the name is not
changed.}

\item{multiplicative}{If the scaling is to be done multiplicatively, i.e. the
new forecast value is to be the old value * scale_factor, set
multiplicative to TRUE. The default (multiplicative = FALSE) is to do the
scaling additively, i.e. the new forecast value is the old value +
scale_factor.}
}
\value{
A \code{harp_fcst} object with forecast values scaled by
  \code{scale_factor}.
}
\description{
`r lifecycle::badge("deprecated")`

\code{\link[harpCore]{scale_param}} is now the preferred function since it
works for both point and gridded data.

If you wish to scale the forecast values, for example when temperature data
are in Kelvin and you want them in degrees C, this function can be used to
scale the data.
}
