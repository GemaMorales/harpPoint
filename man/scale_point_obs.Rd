% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_units_and_scaling.R
\name{scale_point_obs}
\alias{scale_point_obs}
\title{Scale observations data}
\usage{
scale_point_obs(
  .obs,
  parameter,
  scale_factor,
  new_units = NULL,
  multiplicative = FALSE
)
}
\arguments{
\item{.obs}{A data frame of point observations as read in by read in by
read_point_obs from harpIO.}

\item{parameter}{The column name of the data to be scaled. Must be unquoted.}

\item{scale_factor}{The scaling factor.}

\item{new_units}{The name of the new units - if set to NULL, the name is not
changed.}

\item{multiplicative}{If the scaling is to be done multiplicatively, i.e. the
new forecast value is to be the old value * scale_factor, set
multiplicative to TRUE. The default (multiplicative = FALSE) is to do the
scaling additively, i.e. the new forecast value is the old value +
scale_factor.}
}
\value{
The observations data frame with the parameter column scaled by
\code{scale_factor}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}

\code{\link[harpCore]{scale_param}} is now the preferred function since it
works for both point and gridded data.

If you wish to scale the observations values, for example when temperature
data are in Kelvin and you want them in degrees C, this function can be used
to scale the data.
}
